<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>IDECodeSnippetCompletionPrefix</key>
	<string>@MOON_GetLazyUICollectionView</string>
	<key>IDECodeSnippetCompletionScopes</key>
	<array>
		<string>ClassImplementation</string>
	</array>
	<key>IDECodeSnippetContents</key>
	<string>    private lazy var layout: UICollectionViewFlowLayout = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .vertical
        layout.itemSize = &lt;#CGSize#&gt;
        layout.minimumLineSpacing = &lt;#CGFloat#&gt;
        layout.minimumInteritemSpacing = &lt;#CGFloat#&gt;
        return layout
    }()

    private lazy var collectionView: UICollectionView = {
        let collectionView = UICollectionView(frame: .zero, collectionViewLayout: self.layout)
        collectionView.backgroundColor = .clear
        collectionView.showsVerticalScrollIndicator = false
        collectionView.showsHorizontalScrollIndicator = false
        collectionView.delegate = self
        collectionView.dataSource = self
        //        collectionView.register(&lt;#Cell#&gt;.self, forCellWithReuseIdentifier: String(describing: &lt;#Cell#&gt;.self))
        return collectionView
    }()

    extension &lt;#UIViewController#&gt;: UICollectionViewDelegateFlowLayout {
        
        func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -&gt; CGSize {
            return &lt;#Size#&gt;
        }
        
        func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
            // do sth.
        }
    }

    extension &lt;#UIViewController#&gt;: UICollectionViewDataSource {
        
        func numberOfSections(in collectionView: UICollectionView) -&gt; Int {
            return 1
        }
        
        func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -&gt; Int {
            return &lt;#cells#&gt;.count
        }
        
        func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -&gt; UICollectionViewCell {
            guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: String(describing: &lt;#Cell#&gt;.self), for: indexPath) as? &lt;#Cell#&gt; else {
                return UICollectionViewCell()
            }
            if indexPath.row &lt; &lt;#cells#&gt;.count,
               let model = &lt;#cells#&gt;[indexPath.row] as? &lt;#DataSource#&gt; {
                cell.config(model)
            }
            return cell
        }
    }
</string>
	<key>IDECodeSnippetIdentifier</key>
	<string>MOON_GetLazyUICollectionView</string>
	<key>IDECodeSnippetLanguage</key>
	<string>Xcode.SourceCodeLanguage.Swift</string>
	<key>IDECodeSnippetPlatformFamily</key>
	<string>iphoneos</string>
	<key>IDECodeSnippetSummary</key>
	<string>UICollectionView 快速声明</string>
	<key>IDECodeSnippetTitle</key>
	<string>MOON_GetLazyUICollectionView</string>
	<key>IDECodeSnippetUserSnippet</key>
	<true/>
	<key>IDECodeSnippetVersion</key>
	<integer>2</integer>
</dict>
</plist>
